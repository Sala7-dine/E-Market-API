openapi: 3.0.0
info:
  title: E-Market API
  description: API pour la gestion d'une plateforme e-commerce
  version: 1.0.0
  contact:
    name: E-Market Team
    email: support@emarket.com

servers:
  - url: http://localhost:3000
    description: Serveur de développement

tags:
  - name: Authentication
    description: Gestion de l'authentification
  - name: Products
    description: Gestion des produits
  - name: Users
    description: Gestion des utilisateurs
  - name: Categories
    description: Gestion des catégories
  - name: Cart
    description: Gestion du panier

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Entrez votre token JWT (sans 'Bearer ')"

  schemas:
    Product:
      type: object
      properties:
        _id:
          type: string
          example: "68e7b5010bf901dfd66d774a"
        title:
          type: string
          example: "Casque Bluetooth Sony WH-1000XM5"
        description:
          type: string
          example: "Casque antibruit haut de gamme"
        price:
          type: number
          example: 3599
        stock:
          type: integer
          example: 12
        category:
          type: string
          example: "Électronique"
        imageUrl:
          type: string
          example: "https://example.com/image.jpg"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    User:
      type: object
      properties:
        _id:
          type: string
          example: "68e7b5010bf901dfd66d774a"
        fullName:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john@example.com"
        role:
          type: string
          enum: [user, admin]
          example: "user"
        profileImage:
          type: string
          example: "/images/users/avatar-1234567890.jpg"
        isDelete:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Category:
      type: object
      properties:
        _id:
          type: string
          example: "68e7b5010bf901dfd66d774a"
        name:
          type: string
          example: "Électronique"
        description:
          type: string
          example: "Tous les accessoires électroniques"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Cart:
      type: object
      properties:
        _id:
          type: string
          example: "68e7b5010bf901dfd66d774a"
        userId:
          type: string
          example: "68e7b5010bf901dfd66d774a"
        items:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
                example: "68e7b5010bf901dfd66d774a"
              quantity:
                type: integer
                example: 2
              price:
                type: number
                example: 3599
        totalPrice:
          type: number
          example: 7198
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        error:
          type: string
          example: "Message d'erreur"

paths:
  /api/auth/register:
    post:
      tags: [Authentication]
      summary: Inscription d'un nouvel utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - fullName
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  minLength: 6
                  example: "password123"
                fullName:
                  type: string
                  example: "John Doe"
      responses:
        '201':
          description: Utilisateur créé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "user created"
        '400':
          description: Erreur de validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Erreur serveur

  /api/auth/login:
    post:
      tags: [Authentication]
      summary: Connexion utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: Connexion réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: Identifiants invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/refresh:
    post:
      tags: [Authentication]
      summary: Renouvellement du token d'accès
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Token renouvelé
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        '401':
          description: Token invalide

  /api/auth/logout:
    post:
      tags: [Authentication]
      summary: Déconnexion utilisateur
      responses:
        '200':
          description: Déconnexion réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "logged out"

  /api/products:
    get:
      tags: [Products]
      summary: Liste tous les produits
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste des produits
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        '401':
          description: Token manquant ou invalide

  /api/products/create:
    post:
      tags: [Products]
      summary: Crée un nouveau produit
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - price
                - stock
                - category
              properties:
                title:
                  type: string
                  example: "Casque Bluetooth Sony WH-1000XM5"
                description:
                  type: string
                  example: "Casque antibruit haut de gamme avec autonomie de 30h."
                price:
                  type: number
                  example: 3599
                stock:
                  type: integer
                  example: 12
                category:
                  type: string
                  example: "Électronique"
                imageUrl:
                  type: string
                  format: uri
                  example: "https://example.com/sony-xm5.jpg"
      responses:
        '201':
          description: Produit créé avec succès
        '400':
          description: Données invalides
        '401':
          description: Token manquant ou invalide

  /api/products/update/{id}:
    put:
      tags: [Products]
      summary: Met à jour un produit
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
          example: "68e7b5010bf901dfd66d774a"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                price:
                  type: number
                stock:
                  type: integer
                category:
                  type: string
                imageUrl:
                  type: string
                  format: uri
      responses:
        '200':
          description: Produit mis à jour
        '400':
          description: Données invalides
        '401':
          description: Token manquant ou invalide
        '404':
          description: Produit non trouvé

  /api/products/delete/{id}:
    delete:
      tags: [Products]
      summary: Supprime un produit
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
          example: "68e7b5010bf901dfd66d774a"
      responses:
        '200':
          description: Produit supprimé
        '401':
          description: Token manquant ou invalide
        '404':
          description: Produit non trouvé

  /api/products/search:
    get:
      tags: [Products]
      summary: Recherche de produits
      parameters:
        - in: query
          name: category
          schema:
            type: string
          description: Filtrer par catégorie
        - in: query
          name: minPrice
          schema:
            type: number
          description: Prix minimum
        - in: query
          name: maxPrice
          schema:
            type: number
          description: Prix maximum
        - in: query
          name: name
          schema:
            type: string
          description: Rechercher par nom
      responses:
        '200':
          description: Résultats de recherche

  /api/users:
    get:
      tags: [Users]
      summary: Liste tous les utilisateurs
      responses:
        '200':
          description: Liste des utilisateurs
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'

  /api/users/create:
    post:
      tags: [Users]
      summary: Crée un nouvel utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fullName
                - email
                - password
              properties:
                fullName:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  minLength: 6
                  example: "password123"
      responses:
        '201':
          description: Utilisateur créé
        '400':
          description: Données invalides

  /api/users/update/{id}:
    put:
      tags: [Users]
      summary: Met à jour un utilisateur
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
          example: "68e7b5010bf901dfd66d774a"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Utilisateur mis à jour
        '400':
          description: Données invalides
        '404':
          description: Utilisateur non trouvé

  /api/users/delete/{id}:
    delete:
      tags: [Users]
      summary: Supprime un utilisateur
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
          example: "68e7b5010bf901dfd66d774a"
      responses:
        '200':
          description: Utilisateur supprimé
        '404':
          description: Utilisateur non trouvé

  /api/users/me:
    get:
      tags: [Users]
      summary: Consulter le profil de l'utilisateur connecté
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profil utilisateur
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Token manquant ou invalide
        '404':
          description: Utilisateur non trouvé
    patch:
      tags: [Users]
      summary: Modifier le profil de l'utilisateur connecté
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  minLength: 8
                  example: "newpassword123"
                avatar:
                  type: string
                  format: binary
                  description: "Image de profil (max 5MB, formats: jpg, jpeg, png, gif)"
      responses:
        '200':
          description: Profil mis à jour
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Données invalides ou type de fichier non autorisé
        '401':
          description: Token manquant ou invalide

  /api/categories:
    get:
      tags: [Categories]
      summary: Liste toutes les catégories
      responses:
        '200':
          description: Liste des catégories
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'

  /api/categories/create:
    post:
      tags: [Categories]
      summary: Crée une nouvelle catégorie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: "Électronique"
                description:
                  type: string
                  example: "Tous les accessoires électroniques"
      responses:
        '201':
          description: Catégorie créée
        '400':
          description: Données invalides

  /api/categories/update/{id}:
    put:
      tags: [Categories]
      summary: Met à jour une catégorie
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
          example: "68e7b5010bf901dfd66d774a"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Catégorie mise à jour
        '400':
          description: Données invalides
        '404':
          description: Catégorie non trouvée

  /api/categories/delete/{id}:
    delete:
      tags: [Categories]
      summary: Supprime une catégorie
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
          example: "68e7b5010bf901dfd66d774a"
      responses:
        '200':
          description: Catégorie supprimée
        '404':
          description: Catégorie non trouvée

  /api/cart/addtocart:
    post:
      tags: [Cart]
      summary: Ajouter un produit au panier
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
                - quantity
              properties:
                productId:
                  type: string
                  example: "68e7b5010bf901dfd66d774a"
                quantity:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Produit ajouté au panier
        '401':
          description: Non authentifié

  /api/cart/getcarts:
    get:
      tags: [Cart]
      summary: Récupérer tous les paniers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste des paniers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
        '401':
          description: Non authentifié

  /api/cart/deleteProduct/{productId}:
    delete:
      tags: [Cart]
      summary: Supprimer un produit du panier
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
          example: "68e7b5010bf901dfd66d774a"
      responses:
        '200':
          description: Produit supprimé du panier
        '401':
          description: Non authentifié
        '404':
          description: Produit non trouvé

  /api/cart/updateCart/{id}:
    put:
      tags: [Cart]
      summary: Mettre à jour le panier
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: "68e7b5010bf901dfd66d774a"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: string
                      quantity:
                        type: integer
      responses:
        '200':
          description: Panier mis à jour
        '401':
          description: Non authentifié
        '404':
          description: Panier non trouvé