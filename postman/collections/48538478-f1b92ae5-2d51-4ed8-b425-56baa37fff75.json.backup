{
  "info": {
    "_postman_id": "91cc14f8-04c2-4c16-8c28-0f01bb8ac1a5",
    "name": "Merket_API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "48538478",
    "_collection_link": "https://nizarberyan-3828418.postman.co/workspace/Nizar-Beriane's-Workspace~35c46878-f961-4799-81db-ab4e553fbab6/collection/48538478-91cc14f8-04c2-4c16-8c28-0f01bb8ac1a5?action=share&source=collection_link&creator=48538478"
  },
  "item": [
    {
      "name": "Product Managment",
      "item": [
        {
          "name": "Create Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
                  "pm.test(\"Product created with ID\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json).to.have.property('_id');",
                  "    pm.environment.set('productId', json._id);",
                  "});",
                  "pm.test(\"Product has images array\", () => pm.expect(pm.response.json()).to.have.property('images'));",
                  "pm.test(\"Product has createdBy\", () => pm.expect(pm.response.json()).to.have.property('createdBy'));",
                  "pm.test(\"Response time < 3s\", () => pm.expect(pm.response.responseTime).to.be.below(3000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "followRedirects": true,
            "disableUrlEncoding": false,
            "disableCookies": false
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "insomnia/11.6.1"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "title",
                  "value": "adziil",
                  "type": "text"
                },
                {
                  "key": "description",
                  "value": "daha",
                  "type": "text"
                },
                {
                  "key": "prix",
                  "value": "1000",
                  "type": "text"
                },
                {
                  "key": "stock",
                  "value": "200",
                  "type": "text"
                },
                {
                  "key": "categories",
                  "value": "[\"68e8080a186e0c45a07b0574\"]",
                  "type": "text"
                },
                {
                  "key": "images",
                  "type": "file",
                  "src": [
                    "/home/nizar/Pictures/sign crushes motorist.jpg",
                    "/home/nizar/Pictures/2025-06-17_11-51.png",
                    "/home/nizar/Pictures/2025-06-17_11-19.png"
                  ]
                }
              ]
            },
            "url": {
              "raw": "{{baseURL}}/api/products/create",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "products",
                "create"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Products",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response is array\", () => pm.expect(pm.response.json()).to.be.an('array'));",
                  "pm.test(\"Products have required fields\", () => {",
                  "    const products = pm.response.json();",
                  "    if (products.length > 0) {",
                  "        pm.expect(products[0]).to.have.property('title');",
                  "        pm.expect(products[0]).to.have.property('prix');",
                  "        pm.expect(products[0]).to.have.property('stock');",
                  "    }",
                  "});",
                  "pm.test(\"Response time < 1s\", () => pm.expect(pm.response.responseTime).to.be.below(1000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "followRedirects": true,
            "disableUrlEncoding": false,
            "disableCookies": false
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "User-Agent",
                "value": "insomnia/11.6.1"
              }
            ],
            "url": {
              "raw": "{{baseURL}}/api/products/",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "products",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Delete confirmation\", () => pm.expect(pm.response.json()).to.have.property('message'));",
                  "pm.test(\"Response time < 1s\", () => pm.expect(pm.response.responseTime).to.be.below(1000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "followRedirects": true,
            "disableUrlEncoding": false,
            "disableCookies": false
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "User-Agent",
                "value": "insomnia/11.6.1"
              }
            ],
            "url": {
              "raw": "{{baseURL}}/api/products/delete/:id",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "products",
                "delete",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "68ee55f05fb10627400639f2"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Product updated\", () => pm.expect(pm.response.json()).to.have.property('_id'));",
                  "pm.test(\"Response time < 2s\", () => pm.expect(pm.response.responseTime).to.be.below(2000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "followRedirects": true,
            "disableUrlEncoding": false,
            "disableCookies": false
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "insomnia/11.6.1"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "images",
                  "type": "file",
                  "src": [
                    "/home/nizar/Pictures/screenshot-2025-10-15_09-51-04.png",
                    "/home/nizar/Pictures/screenshot-2025-10-14_11-34-46.png",
                    "/home/nizar/Pictures/screenshot-2025-10-08_17-02-44.png",
                    "/home/nizar/Pictures/screenshot-2025-10-08_17-02-30.png"
                  ]
                }
              ]
            },
            "url": {
              "raw": "{{baseURL}}/api/products/update/68f75a801289782df366d420",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "products",
                "update",
                "68f75a801289782df366d420"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Search Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response has products array\", () => pm.expect(pm.response.json()).to.have.property('products'));",
                  "pm.test(\"Response has pagination\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json).to.have.property('page');",
                  "    pm.expect(json).to.have.property('limit');",
                  "    pm.expect(json).to.have.property('total');",
                  "});",
                  "pm.test(\"Response time < 1s\", () => pm.expect(pm.response.responseTime).to.be.below(1000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "followRedirects": true,
            "disableUrlEncoding": false,
            "disableCookies": false
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "User-Agent",
                "value": "insomnia/11.6.1"
              }
            ],
            "url": {
              "raw": "{{baseURL}}/api/products/search?page=2&&limit=2",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "products",
                "search"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "2"
                },
                {
                  "key": null,
                  "value": null
                },
                {
                  "key": "limit",
                  "value": "2"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Review Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
                  "pm.test(\"Review added\", () => pm.expect(pm.response.json()).to.have.property('message'));",
                  "pm.test(\"Product averageRating updated\", () => pm.expect(pm.response.json().product).to.have.property('averageRating'));",
                  "pm.test(\"Response time < 1s\", () => pm.expect(pm.response.responseTime).to.be.below(1000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"rating\": 5,\n    \"comment\": \"goooood morning vietnam\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL}}/api/products/:id/reviews",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "products",
                ":id",
                "reviews"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "68ee55f05fb10627400639f2"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Product Reviews",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "insomnia/11.6.1"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "title",
                  "value": "adziil",
                  "type": "text"
                },
                {
                  "key": "description",
                  "value": "daha",
                  "type": "text"
                },
                {
                  "key": "prix",
                  "value": "1000",
                  "type": "text"
                },
                {
                  "key": "stock",
                  "value": "200",
                  "type": "text"
                },
                {
                  "key": "categories",
                  "value": "[\"68e8080a186e0c45a07b0574\"]",
                  "type": "text"
                },
                {
                  "key": "images",
                  "type": "file",
                  "src": [
                    "/home/nizar/Pictures/sign crushes motorist.jpg",
                    "/home/nizar/Pictures/2025-06-17_11-51.png",
                    "/home/nizar/Pictures/2025-06-17_11-19.png"
                  ]
                }
              ]
            },
            "url": {
              "raw": "{{baseURL}}/api/products/:id/reviews",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "products",
                ":id",
                "reviews"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "68ee55f05fb10627400639f2"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "requests": {},
            "exec": [
              "// Pre-request script to programmatically obtain accessToken and set it as environment variable",
              "",
              "const loginRequest = {",
              "    url: pm.variables.replaceIn(\"{{baseURL}}/api/auth/login\"),",
              "    method: 'POST',",
              "    header: {",
              "        'Content-Type': 'application/json',",
              "        'User-Agent': 'insomnia/11.6.1'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({",
              "            email: 'salahdaha7@gmail.com',",
              "            password: 'salah1234'",
              "        })",
              "    }",
              "};",
              "",
              "pm.sendRequest(loginRequest, function (err, res) {",
              "    if (err) {",
              "        console.error('Login request failed:', err);",
              "        return;",
              "    }",
              "    try {",
              "        const data = res.json();",
              "        if (data && data.accessToken) {",
              "            pm.environment.set('accessToken', data.accessToken);",
              "            console.log('accessToken set in environment:', data.accessToken);",
              "        } else {",
              "            console.error('accessToken not found in login response:', data);",
              "        }",
              "    } catch (e) {",
              "        console.error('Failed to parse login response:', e);",
              "    }",
              "});"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "requests": {},
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "User Management",
      "item": [
        {
          "name": "Get Usrers",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response is array\", () => pm.expect(pm.response.json()).to.be.an('array'));",
                  "pm.test(\"Users have required fields\", () => {",
                  "    const users = pm.response.json();",
                  "    if (users.length > 0) {",
                  "        pm.expect(users[0]).to.have.property('email');",
                  "        pm.expect(users[0]).to.have.property('role');",
                  "    }",
                  "});",
                  "pm.test(\"Response time < 1s\", () => pm.expect(pm.response.responseTime).to.be.below(1000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "followRedirects": true,
            "disableUrlEncoding": false,
            "disableCookies": false
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "insomnia/11.6.1"
              }
            ],
            "url": {
              "raw": "{{baseURL}}/api/users",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
                  "pm.test(\"User created with ID\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json).to.have.property('_id');",
                  "    pm.environment.set('userId', json._id);",
                  "});",
                  "pm.test(\"Password not exposed\", () => pm.expect(pm.response.json()).to.not.have.property('password'));",
                  "pm.test(\"Response time < 2s\", () => pm.expect(pm.response.responseTime).to.be.below(2000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "followRedirects": true,
            "disableUrlEncoding": false,
            "disableCookies": false
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "insomnia/11.6.1"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"fullName\" : \"adil\",\n\t\"email\" : \"adil@gmail.com\",\n\t\"password\" : \"12341234\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL}}/api/users/create",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "users",
                "create"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Delete confirmation\", () => pm.expect(pm.response.json()).to.have.property('message'));",
                  "pm.test(\"Response time < 1s\", () => pm.expect(pm.response.responseTime).to.be.below(1000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "followRedirects": true,
            "disableUrlEncoding": false,
            "disableCookies": false
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "User-Agent",
                "value": "insomnia/11.6.1"
              }
            ],
            "url": {
              "raw": "{{baseURL}}/api/users/delete/68ee5b270f6cc8d08c66e84b",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "users",
                "delete",
                "68ee5b270f6cc8d08c66e84b"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"User updated\", () => pm.expect(pm.response.json()).to.have.property('_id'));",
                  "pm.test(\"Response time < 1s\", () => pm.expect(pm.response.responseTime).to.be.below(1000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "followRedirects": true,
            "disableUrlEncoding": false,
            "disableCookies": false
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "insomnia/11.6.1"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"fullName\" : \"ayoub\",\n\t\"email\" : \"ayoub@gmail.com\",\n\t\"password\" : \"salah1234\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL}}/api/users/update/68ed0b532552bcf9fe0c3390",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "users",
                "update",
                "68ed0b532552bcf9fe0c3390"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Patch User",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Profile updated\", () => pm.expect(pm.response.json()).to.have.property('message'));",
                  "pm.test(\"Response time < 2s\", () => pm.expect(pm.response.responseTime).to.be.below(2000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "avatar",
                  "type": "file",
                  "src": "/home/nizar/Downloads/1759833951065.png"
                }
              ]
            },
            "url": {
              "raw": "{{baseURL}}/api/users/me",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "users",
                "me"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Current User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"User profile returned\", () => {",
                  "    const user = pm.response.json();",
                  "    pm.expect(user).to.have.property('email');",
                  "    pm.expect(user).to.have.property('role');",
                  "});",
                  "pm.test(\"Password not exposed\", () => pm.expect(pm.response.json()).to.not.have.property('password'));",
                  "pm.test(\"Response time < 1s\", () => pm.expect(pm.response.responseTime).to.be.below(1000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/api/users/me",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "users",
                "me"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Category Management",
      "item": [
        {
          "name": "Get Categories",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response is array\", () => pm.expect(pm.response.json()).to.be.an('array'));",
                  "pm.test(\"Categories have name\", () => {",
                  "    const categories = pm.response.json();",
                  "    if (categories.length > 0) {",
                  "        pm.expect(categories[0]).to.have.property('name');",
                  "    }",
                  "});",
                  "pm.test(\"Response time < 1s\", () => pm.expect(pm.response.responseTime).to.be.below(1000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "followRedirects": true,
            "disableUrlEncoding": false,
            "disableCookies": false
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "User-Agent",
                "value": "insomnia/11.6.1"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL}}/api/categories/",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "categories",
                ""
              ]
            },
            "description": "## Get Categories\n\nThis endpoint retrieves a list of all product categories available in the system.\n\n### Endpoint\n```\nGET {{baseURL}}/api/categories/\n```\n\n### Description\nThe Categories endpoint returns an array of category objects that can be used for product classification, filtering, and navigation throughout the application. Each category represents a distinct product grouping.\n\n### Parameters\nNo query parameters are required for this endpoint.\n\n### Headers\n- `User-Agent`: Identifies the client making the request (e.g., `insomnia/11.6.1`)\n\n### Response Format\nThe response is a JSON array of category objects. Each category object contains:\n\n```json\n[\n  {\n    \"id\": \"string\",\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"image\": \"string\" (optional),\n    \"created_at\": \"datetime\",\n    \"updated_at\": \"datetime\"\n  }\n]\n```\n\n### Response Codes\n- `200 OK`: Request successful, categories returned\n- `401 Unauthorized`: Authentication required\n- `403 Forbidden`: Insufficient permissions to access categories\n- `500 Internal Server Error`: Server-side error\n\n### Usage Examples\nThis endpoint can be used to:\n- Populate category dropdown menus\n- Build navigation structures\n- Filter products by category\n- Display category information on product listings\n\n### Notes\n- Categories are returned in alphabetical order by default\n- The response may be cached to improve performance"
          },
          "response": []
        },
        {
          "name": "Create Categorie",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
                  "pm.test(\"Category created with ID\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json).to.have.property('_id');",
                  "    pm.environment.set('categoryId', json._id);",
                  "});",
                  "pm.test(\"Response time < 1s\", () => pm.expect(pm.response.responseTime).to.be.below(1000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "followRedirects": true,
            "disableUrlEncoding": false,
            "disableCookies": false
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "insomnia/11.6.1"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\" : \"Electronique 4\",\n\t\"description\" : \"lorem eckrnv ckwejnc cjwibec cwbeicbwe ciwubhc\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL}}/api/categories/create",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "categories",
                "create"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Categorie",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Category updated\", () => pm.expect(pm.response.json()).to.have.property('_id'));",
                  "pm.test(\"Response time < 1s\", () => pm.expect(pm.response.responseTime).to.be.below(1000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "followRedirects": true,
            "disableUrlEncoding": false,
            "disableCookies": false
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "insomnia/11.6.1"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\" : \"Neuvoux cc\",\n\t\"description\" : \"updated categorie\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL}}/api/categories/update/68ef67fd1752c33779f27082",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "categories",
                "update",
                "68ef67fd1752c33779f27082"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Categorie",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Delete confirmation\", () => pm.expect(pm.response.json()).to.have.property('message'));",
                  "pm.test(\"Response time < 1s\", () => pm.expect(pm.response.responseTime).to.be.below(1000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "followRedirects": true,
            "disableUrlEncoding": false,
            "disableCookies": false
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "User-Agent",
                "value": "insomnia/11.6.1"
              }
            ],
            "url": {
              "raw": "{{baseURL}}/api/categorie/delete/68ee4f0942439e37bd8119b3",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "categorie",
                "delete",
                "68ee4f0942439e37bd8119b3"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Authentification",
      "item": [
        {
          "name": "Login",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response has accessToken\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json).to.have.property('accessToken');",
                  "    pm.environment.set('accessToken', json.accessToken);",
                  "    pm.environment.set('refreshToken', json.refreshToken); // Store refreshToken in environment variable for future use",
                  "});",
                  "pm.test(\"Response has refreshToken\", () => pm.expect(pm.response.json()).to.have.property('refreshToken'));",
                  "pm.test(\"User has valid role\", () => {",
                  "    const user = pm.response.json().user;",
                  "    pm.expect(['user', 'seller', 'admin']).to.include(user.role);",
                  "});",
                  "pm.test(\"Response time < 2s\", () => pm.expect(pm.response.responseTime).to.be.below(2000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "followRedirects": true,
            "disableUrlEncoding": false,
            "disableCookies": false
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "insomnia/11.6.1"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"nizarberiane@proton.me\",\n    \"password\": \"nizar123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL}}/api/auth/login",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "auth",
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Register",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
                  "pm.test(\"Response has accessToken\", () => pm.expect(pm.response.json()).to.have.property('accessToken'));",
                  "pm.test(\"Response has refreshToken\", () => pm.expect(pm.response.json()).to.have.property('refreshToken'));",
                  "pm.test(\"Response has user object\", () => pm.expect(pm.response.json()).to.have.property('user'));",
                  "pm.test(\"Response time < 2s\", () => pm.expect(pm.response.responseTime).to.be.below(2000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "followRedirects": true,
            "disableUrlEncoding": false,
            "disableCookies": false
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "insomnia/11.6.1"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"fullName\" : \"Nizar Beriane\",\n    \"email\" : \"nizarberiane@proton.me\",\n\t\"password\" : \"nizar123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL}}/api/auth/register",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "auth",
                "register"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Refrach Token",
          "protocolProfileBehavior": {
            "followRedirects": true,
            "disableUrlEncoding": false,
            "disableCookies": false
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "User-Agent",
                "value": "insomnia/11.6.1"
              }
            ],
            "url": {
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Success message received\", () => pm.expect(pm.response.json()).to.have.property('message'));",
                  "pm.test(\"Response time < 1s\", () => pm.expect(pm.response.responseTime).to.be.below(1000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "followRedirects": true,
            "disableUrlEncoding": false,
            "disableCookies": false
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "User-Agent",
                "value": "insomnia/11.6.1"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2OGVlMjgxZDA5NzczMjhkYWE0ODY2ZGIiLCJqdGkiOiI1YTZkMGMwMy04ZmI3LTQ4NTctYWUzNy04NjZlZWJmMDJmNmEiLCJpYXQiOjE3NjA0Mzg2NjQsImV4cCI6MTc2MzAzMDY2NH0.uvzYRMPAdPegIN-Ynaxt80m1Rv57wuDUiA6QcZkQRuw\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL}}/api/auth/logout",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "auth",
                "logout"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Current User Info",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/api/users/me",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "users",
                "me"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Refresh accessToken",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"New accessToken received\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json).to.have.property('accessToken');",
                  "    pm.environment.set('accessToken', json.accessToken);",
                  "});",
                  "pm.test(\"Response time < 1s\", () => pm.expect(pm.response.responseTime).to.be.below(1000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"refreshToken\": \"{{refreshToken}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL}}/api/auth/refresh",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "auth",
                "refresh"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Cart Management",
      "item": [
        {
          "name": "add product to cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
                  "pm.test(\"Cart item added\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json).to.have.property('_id');",
                  "    pm.environment.set('cartId', json._id);",
                  "});",
                  "pm.test(\"Cart has products array\", () => pm.expect(pm.response.json()).to.have.property('products'));",
                  "pm.test(\"Response time < 1s\", () => pm.expect(pm.response.responseTime).to.be.below(1000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "User-Agent",
                "value": "insomnia/11.6.1"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"productId\": \"68ee30cfaac65d37e39b5ce3\",\r\n  \"quantity\": 1\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL}}/api/carts/addtocart",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "carts",
                "addtocart"
              ]
            }
          },
          "response": []
        },
        {
          "name": "get user's cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response is array\", () => pm.expect(pm.response.json()).to.be.an('array'));",
                  "pm.test(\"Cart has products\", () => {",
                  "    const carts = pm.response.json();",
                  "    if (carts.length > 0) {",
                  "        pm.expect(carts[0]).to.have.property('products');",
                  "    }",
                  "});",
                  "pm.test(\"Response time < 1s\", () => pm.expect(pm.response.responseTime).to.be.below(1000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseURL}}/api/carts/getcarts",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "carts",
                "getcarts"
              ]
            }
          },
          "response": []
        },
        {
          "name": "delete product from cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Product removed from cart\", () => pm.expect(pm.response.json()).to.have.property('message'));",
                  "pm.test(\"Response time < 1s\", () => pm.expect(pm.response.responseTime).to.be.below(1000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "update Cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Cart updated\", () => pm.expect(pm.response.json()).to.have.property('_id'));",
                  "pm.test(\"Response time < 1s\", () => pm.expect(pm.response.responseTime).to.be.below(1000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"quantity\" : 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL}}/api/carts/updateCart/68ee30cfaac65d37e39b5ce3",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "carts",
                "updateCart",
                "68ee30cfaac65d37e39b5ce3"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Order Management",
      "item": [
        {
          "name": "add order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
                  "pm.test(\"Order created with ID\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json).to.have.property('_id');",
                  "    pm.environment.set('orderId', json._id);",
                  "});",
                  "pm.test(\"Order has status\", () => {",
                  "    const status = pm.response.json().status;",
                  "    pm.expect(['pending', 'paid', 'shipped', 'delivered', 'cancelled']).to.include(status);",
                  "});",
                  "pm.test(\"Order has totalPrice\", () => pm.expect(pm.response.json()).to.have.property('totalPrice'));",
                  "pm.test(\"Response time < 2s\", () => pm.expect(pm.response.responseTime).to.be.below(2000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseURL}}/api/orders/addOrder/68ef75e68f8b6d61f4dfb357",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "orders",
                "addOrder",
                "68ef75e68f8b6d61f4dfb357"
              ]
            }
          },
          "response": []
        },
        {
          "name": "get user's orders",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response is array\", () => pm.expect(pm.response.json()).to.be.an('array'));",
                  "pm.test(\"Orders have required fields\", () => {",
                  "    const orders = pm.response.json();",
                  "    if (orders.length > 0) {",
                  "        pm.expect(orders[0]).to.have.property('status');",
                  "        pm.expect(orders[0]).to.have.property('totalPrice');",
                  "    }",
                  "});",
                  "pm.test(\"Response time < 1s\", () => pm.expect(pm.response.responseTime).to.be.below(1000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/api/orders/getOrder",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "orders",
                "getOrder"
              ]
            }
          },
          "response": []
        },
        {
          "name": "change order's status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Order status updated\", () => pm.expect(pm.response.json()).to.have.property('status'));",
                  "pm.test(\"Valid status\", () => {",
                  "    const status = pm.response.json().status;",
                  "    pm.expect(['pending', 'paid', 'shipped', 'delivered', 'cancelled']).to.include(status);",
                  "});",
                  "pm.test(\"Response time < 1s\", () => pm.expect(pm.response.responseTime).to.be.below(1000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"status\" : \"paid\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL}}/api/orders/updateStatus/68f11676343a8c2aaf76ed35",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "orders",
                "updateStatus",
                "68f11676343a8c2aaf76ed35"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Coupons Management",
      "item": [
        {
          "name": "create coupon",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
                  "pm.test(\"Coupon created with ID\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json).to.have.property('_id');",
                  "    pm.environment.set('couponId', json._id);",
                  "});",
                  "pm.test(\"Coupon has code\", () => pm.expect(pm.response.json()).to.have.property('code'));",
                  "pm.test(\"Coupon has discount\", () => pm.expect(pm.response.json()).to.have.property('discount'));",
                  "pm.test(\"Response time < 1s\", () => pm.expect(pm.response.responseTime).to.be.below(1000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"code\": \"PROMO10\",\r\n  \"type\": \"percentage\",\r\n  \"value\": 10,\r\n  \"expirationDate\": \"2025-12-31T00:00:00.000Z\",\r\n  \"minOrderAmount\": 100\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL}}/api/coupons/createCoupon",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "coupons",
                "createCoupon"
              ]
            }
          },
          "response": []
        },
        {
          "name": "get All User 's Coupons",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response is array\", () => pm.expect(pm.response.json()).to.be.an('array'));",
                  "pm.test(\"Coupons have required fields\", () => {",
                  "    const coupons = pm.response.json();",
                  "    if (coupons.length > 0) {",
                  "        pm.expect(coupons[0]).to.have.property('code');",
                  "        pm.expect(coupons[0]).to.have.property('discount');",
                  "    }",
                  "});",
                  "pm.test(\"Response time < 1s\", () => pm.expect(pm.response.responseTime).to.be.below(1000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"code\": \"PROMO10\",\r\n  \"type\": \"percentage\",\r\n  \"value\": 10,\r\n  \"expirationDate\": \"2025-12-31T00:00:00.000Z\",\r\n  \"minOrderAmount\": 100\r\n}\r\n"
            },
            "url": {
              "raw": "{{baseURL}}/api/coupons/getAllUserCoupon",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "coupons",
                "getAllUserCoupon"
              ]
            }
          },
          "response": []
        },
        {
          "name": "get all coupons",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response is array\", () => pm.expect(pm.response.json()).to.be.an('array'));",
                  "pm.test(\"Coupons have required fields\", () => {",
                  "    const coupons = pm.response.json();",
                  "    if (coupons.length > 0) {",
                  "        pm.expect(coupons[0]).to.have.property('code');",
                  "        pm.expect(coupons[0]).to.have.property('discount');",
                  "    }",
                  "});",
                  "pm.test(\"Response time < 1s\", () => pm.expect(pm.response.responseTime).to.be.below(1000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/api/coupons/getAllCoupon",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "coupons",
                "getAllCoupon"
              ]
            }
          },
          "response": []
        },
        {
          "name": "update coupon",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Coupon updated\", () => pm.expect(pm.response.json()).to.have.property('_id'));",
                  "pm.test(\"Response time < 1s\", () => pm.expect(pm.response.responseTime).to.be.below(1000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"code\": \"NEWYEAR25\",\r\n  \"type\": \"percentage\",\r\n  \"value\": 25,\r\n  \"expirationDate\": \"2025-12-31T23:59:59.000Z\",\r\n  \"minOrderAmount\": 100,\r\n  \"isActive\": true\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL}}/api/coupons/updateCoupon/6900a2e2a9f41b7dc1fb47b3",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "coupons",
                "updateCoupon",
                "6900a2e2a9f41b7dc1fb47b3"
              ]
            }
          },
          "response": []
        },
        {
          "name": "delete coupons",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/api/coupons/deleteCoupon/:id",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "coupons",
                "deleteCoupon",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "68f63ea6181bd1c304f4a742"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Notification Management",
      "item": [
        {
          "name": "Get Notifications",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response is array\", () => pm.expect(pm.response.json()).to.be.an('array'));",
                  "pm.test(\"Notifications have required fields\", () => {",
                  "    const notifications = pm.response.json();",
                  "    if (notifications.length > 0) {",
                  "        pm.expect(notifications[0]).to.have.property('message');",
                  "        pm.expect(notifications[0]).to.have.property('type');",
                  "        pm.expect(notifications[0]).to.have.property('read');",
                  "    }",
                  "});",
                  "pm.test(\"Response time < 1s\", () => pm.expect(pm.response.responseTime).to.be.below(1000));"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/api/notifications",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "notifications"
              ]
            }
          },
          "response": []
        },
        {
          "name": "New Request",
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/api/notifications/:id/read",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "notifications",
                ":id",
                "read"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "68fb8c86d6a7c4022e555726"
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "requests": {},
        "exec": [
          "// Auto-login if no accessToken exists",
          "if (!pm.environment.get('accessToken')) {",
          "    pm.sendRequest({",
          "        url: pm.variables.replaceIn('{{baseURL}}/api/auth/login'),",
          "        method: 'POST',",
          "        header: { 'Content-Type': 'application/json' },",
          "        body: {",
          "            mode: 'raw',",
          "            raw: JSON.stringify({",
          "                email: 'salahdaha7@gmail.com',",
          "                password: 'salah1234'",
          "            })",
          "        }",
          "    }, (err, res) => {",
          "        if (!err && res.json().accessToken) {",
          "            pm.environment.set('accessToken', res.json().accessToken);",
          "        }",
          "    });",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "requests": {},
        "exec": [
          "// Global tests for all requests",
          "pm.test(\"Response has valid JSON\", () => {",
          "    pm.response.to.be.json;",
          "});",
          "",
          "pm.test(\"No server errors (5xx)\", () => {",
          "    pm.expect(pm.response.code).to.be.below(500);",
          "});",
          "",
          "// Log response for debugging",
          "console.log(`${pm.info.requestName}: ${pm.response.code} - ${pm.response.responseTime}ms`);"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseURL",
      "value": ""
    }
  ]
}